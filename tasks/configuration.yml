---
- name: Jira configuration - Ensure home location is set in properties.
  lineinfile:
    dest: "{{ jira_current_dir }}/atlassian-jira/WEB-INF/classes/jira-application.properties"
    regexp: '^jira.home ='
    line: "jira.home = {{ jira_data_dir }}"
    create: yes
    state: present
  notify: restart jira service
- name: Jira configuration - Ensure minimum memory is set.
  lineinfile:
    dest: "{{ jira_current_dir }}/bin/setenv.sh"
    regexp: '^JVM_MINIMUM_MEMORY'
    line: "JVM_MINIMUM_MEMORY={{ jira_xms }}"
    state: present
  notify: restart jira service
- name: Jira configuration - Ensure maximum memory is set.
  lineinfile:
    dest: "{{ jira_current_dir }}/bin/setenv.sh"
    regexp: '^JVM_MAXIMUM_MEMORY'
    line: "JVM_MAXIMUM_MEMORY={{ jira_xmx }}"
    state: present
  notify: restart jira service

- name: Jira configuration - Ensure java extra args are set.
  lineinfile:
    dest: "{{ jira_current_dir }}/bin/setenv.sh"
    regexp: '^JVM_REQUIRED_ARGS=${JVM_REQUIRED_ARGS}'
    line: 'JVM_REQUIRED_ARGS="${JVM_REQUIRED_ARGS} {{ jira_java_extra_args }}"'
    insertbefore: '^JAVA_OPTS='
  notify: restart jira service
  when: jira_java_extra_args is defined

- name: Jira configuration - Ensure server.xml prerequisites are installed.
  apt:
    package: 'python3-lxml'
    state: present
  when: jira_public_url is defined

- name: Jira configuration - Ensure server.xml is set.
  community.general.xml:
    path: "{{ jira_current_dir }}/conf/server.xml"
    xpath: "/Server/Service/Connector"
    attribute: "{{Â item.key }}"
    value: "{{ item.value }}"
  loop:
    - { key: "scheme", value: "https"}
    - { key: "proxyName" , value: "{{ jira_public_url }}"}
    - { key: "proxyPort", value: "443"}
  notify: restart jira service
  when: jira_public_url is defined
